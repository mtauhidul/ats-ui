import { useState } from "react";
import { Plus, Mail, Edit, Trash2, Copy, Info } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from "@/components/ui/dialog";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { toast } from "sonner";
import { 
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from "@/components/ui/alert-dialog";

interface EmailTemplate {
  id: string;
  name: string;
  subject: string;
  body: string;
  type: "interview" | "offer" | "rejection" | "follow_up" | "general";
  variables: string[];
  createdAt: Date;
  updatedAt: Date;
}

const initialTemplates: EmailTemplate[] = [
  {
    id: "tmpl-1",
    name: "Interview Invitation",
    subject: "Interview Invitation - {{jobTitle}}",
    body: "Dear {{firstName}} {{lastName}},\n\nWe are pleased to inform you that after reviewing your application for the {{jobTitle}} position at {{companyName}}, we would like to invite you for an interview.\n\nInterview Details:\nDate: {{interviewDate}}\nTime: {{interviewTime}}\nLocation: {{interviewLocation}}\n\nPlease confirm your attendance by replying to this email.\n\nWe look forward to meeting you!\n\nBest regards,\n{{recruiterName}}\n{{companyName}}",
    type: "interview",
    variables: ["firstName", "lastName", "jobTitle", "companyName", "interviewDate", "interviewTime", "interviewLocation", "recruiterName"],
    createdAt: new Date("2025-01-15"),
    updatedAt: new Date("2025-01-15"),
  },
  {
    id: "tmpl-2",
    name: "Job Offer Letter",
    subject: "Job Offer - {{jobTitle}} at {{companyName}}",
    body: "Dear {{firstName}} {{lastName}},\n\nWe are delighted to offer you the position of {{jobTitle}} at {{companyName}}.\n\nPosition Details:\n• Title: {{jobTitle}}\n• Department: {{department}}\n• Start Date: {{startDate}}\n• Salary: {{salary}}\n• Benefits: {{benefits}}\n\nThis offer is contingent upon successful completion of background checks and reference verification.\n\nPlease review the attached detailed offer letter and respond within 5 business days to accept this offer.\n\nCongratulations!\n\nSincerely,\n{{recruiterName}}\n{{companyName}}",
    type: "offer",
    variables: ["firstName", "lastName", "jobTitle", "companyName", "department", "startDate", "salary", "benefits", "recruiterName"],
    createdAt: new Date("2025-01-10"),
    updatedAt: new Date("2025-01-10"),
  },
  {
    id: "tmpl-3",
    name: "Application Received",
    subject: "Application Received - {{jobTitle}}",
    body: "Dear {{firstName}},\n\nThank you for your interest in the {{jobTitle}} position at {{companyName}}.\n\nWe have successfully received your application and our team is currently reviewing all submissions. We will contact you within {{reviewDays}} business days if your qualifications match our requirements.\n\nWe appreciate your interest in joining our team!\n\nBest regards,\n{{recruiterName}}\nRecruitment Team\n{{companyName}}",
    type: "follow_up",
    variables: ["firstName", "jobTitle", "companyName", "reviewDays", "recruiterName"],
    createdAt: new Date("2025-01-20"),
    updatedAt: new Date("2025-01-20"),
  },
  {
    id: "tmpl-4",
    name: "Rejection - Not Selected",
    subject: "Update on Your Application - {{jobTitle}}",
    body: "Dear {{firstName}} {{lastName}},\n\nThank you for taking the time to apply for the {{jobTitle}} position at {{companyName}} and for your interest in joining our team.\n\nAfter careful consideration, we have decided to move forward with other candidates whose qualifications more closely match our current needs for this role.\n\nWe were impressed by your background and encourage you to apply for future opportunities that align with your skills and experience. We will keep your resume on file for {{retentionPeriod}} months.\n\nWe wish you the best in your job search and future endeavors.\n\nBest regards,\n{{recruiterName}}\n{{companyName}}",
    type: "rejection",
    variables: ["firstName", "lastName", "jobTitle", "companyName", "retentionPeriod", "recruiterName"],
    createdAt: new Date("2025-01-12"),
    updatedAt: new Date("2025-01-12"),
  },
];

const availableVariables = [
  "firstName", "lastName", "email", "phone",
  "jobTitle", "companyName", "department",
  "interviewDate", "interviewTime", "interviewLocation",
  "startDate", "salary", "benefits",
  "reviewDays", "retentionPeriod",
  "recruiterName", "recruiterEmail", "recruiterPhone"
];

const templateTypes = [
  { value: "interview", label: "Interview Invitation" },
  { value: "offer", label: "Job Offer" },
  { value: "rejection", label: "Rejection" },
  { value: "follow_up", label: "Follow Up" },
  { value: "general", label: "General" },
];

export function EmailTemplatesSettings() {
  const [templates, setTemplates] = useState<EmailTemplate[]>(initialTemplates);
  const [isAddOpen, setIsAddOpen] = useState(false);
  const [editingTemplate, setEditingTemplate] = useState<EmailTemplate | null>(null);
  const [deleteTemplate, setDeleteTemplate] = useState<EmailTemplate | null>(null);
  
  const [formData, setFormData] = useState({
    name: "",
    subject: "",
    body: "",
    type: "general" as EmailTemplate["type"],
  });
  
  const [customVariable, setCustomVariable] = useState("");
  const [showAddVariable, setShowAddVariable] = useState(false);

  const handleAdd = () => {
    setFormData({ name: "", subject: "", body: "", type: "general" });
    setIsAddOpen(true);
  };

  const handleEdit = (template: EmailTemplate) => {
    setFormData({
      name: template.name,
      subject: template.subject,
      body: template.body,
      type: template.type,
    });
    setEditingTemplate(template);
  };

  const handleDuplicate = (template: EmailTemplate) => {
    const newTemplate: EmailTemplate = {
      ...template,
      id: `tmpl-${Date.now()}`,
      name: `${template.name} (Copy)`,
      createdAt: new Date(),
      updatedAt: new Date(),
    };
    setTemplates([...templates, newTemplate]);
    toast.success("Template duplicated successfully");
  };

  const handleDelete = () => {
    if (deleteTemplate) {
      setTemplates(templates.filter(t => t.id !== deleteTemplate.id));
      toast.success("Template deleted successfully");
      setDeleteTemplate(null);
    }
  };

  const extractVariables = (text: string): string[] => {
    const regex = /\{\{([^}]+)\}\}/g;
    const matches = text.matchAll(regex);
    const vars = new Set<string>();
    for (const match of matches) {
      vars.add(match[1].trim());
    }
    return Array.from(vars);
  };

  const handleSave = () => {
    if (!formData.name || !formData.subject || !formData.body) {
      toast.error("Please fill in all required fields");
      return;
    }

    const variables = extractVariables(formData.subject + " " + formData.body);

    if (editingTemplate) {
      // Update existing template
      setTemplates(templates.map(t => 
        t.id === editingTemplate.id 
          ? { ...t, ...formData, variables, updatedAt: new Date() }
          : t
      ));
      toast.success("Template updated successfully");
    } else {
      // Add new template
      const newTemplate: EmailTemplate = {
        id: `tmpl-${Date.now()}`,
        ...formData,
        variables,
        createdAt: new Date(),
        updatedAt: new Date(),
      };
      setTemplates([...templates, newTemplate]);
      toast.success("Template created successfully");
    }

    setIsAddOpen(false);
    setEditingTemplate(null);
    setFormData({ name: "", subject: "", body: "", type: "general" });
  };

  const insertVariable = (variable: string) => {
    const textarea = document.querySelector('textarea[name="body"]') as HTMLTextAreaElement;
    if (textarea) {
      const start = textarea.selectionStart;
      const end = textarea.selectionEnd;
      const text = formData.body;
      const before = text.substring(0, start);
      const after = text.substring(end);
      const newText = before + `{{${variable}}}` + after;
      setFormData({ ...formData, body: newText });
      
      // Set cursor position after inserted variable
      setTimeout(() => {
        textarea.focus();
        textarea.setSelectionRange(start + variable.length + 4, start + variable.length + 4);
      }, 0);
    }
  };

  return (
    <div className="space-y-6">
      {/* Info Banner */}
      <Card className="bg-blue-50/50 dark:bg-blue-950/20 border-blue-200 dark:border-blue-900">
        <CardContent className="pt-6">
          <div className="flex gap-3">
            <Info className="h-5 w-5 text-blue-600 dark:text-blue-400 shrink-0 mt-0.5" />
            <div className="text-sm text-blue-900 dark:text-blue-100">
              <p className="font-medium mb-1">Email Template Variables</p>
              <p className="text-blue-700 dark:text-blue-300">
                Use variables like <Badge variant="secondary" className="mx-1">{'{{firstName}}'}</Badge> in your templates. 
                They will be automatically replaced with actual values when sending emails.
              </p>
            </div>
          </div>
        </CardContent>
      </Card>

      <div className="flex items-center justify-between">
        <div>
          <h3 className="text-lg font-semibold">Email Templates</h3>
          <p className="text-sm text-muted-foreground">
            Create and manage reusable email templates with dynamic variables
          </p>
        </div>
        <Button onClick={handleAdd}>
          <Plus className="h-4 w-4 mr-2" />
          Add Template
        </Button>
      </div>

      <div className="grid gap-4">
        {templates.length === 0 ? (
          <Card>
            <CardContent className="py-12">
              <div className="text-center space-y-3">
                <div className="w-12 h-12 bg-muted rounded-full flex items-center justify-center mx-auto">
                  <Mail className="h-6 w-6 text-muted-foreground" />
                </div>
                <h3 className="text-lg font-semibold">No Templates Yet</h3>
                <p className="text-sm text-muted-foreground max-w-md mx-auto">
                  Create your first email template to streamline candidate communication
                </p>
                <Button onClick={handleAdd}>
                  <Plus className="h-4 w-4 mr-2" />
                  Create Template
                </Button>
              </div>
            </CardContent>
          </Card>
        ) : (
          templates.map((template) => (
            <Card key={template.id} className="hover:shadow-md transition-shadow">
              <CardHeader>
                <div className="flex items-start justify-between">
                  <div className="flex-1 min-w-0">
                    <div className="flex items-center gap-2 mb-1">
                      <Mail className="h-4 w-4 text-primary shrink-0" />
                      <CardTitle className="text-base truncate">{template.name}</CardTitle>
                      <Badge variant="outline" className="capitalize text-xs">
                        {template.type.replace("_", " ")}
                      </Badge>
                    </div>
                    <CardDescription className="truncate">
                      {template.subject}
                    </CardDescription>
                  </div>
                  <div className="flex gap-1 shrink-0 ml-2">
                    <Button 
                      variant="ghost" 
                      size="sm" 
                      onClick={() => handleEdit(template)}
                      className="h-8 w-8 p-0"
                    >
                      <Edit className="h-4 w-4" />
                    </Button>
                    <Button 
                      variant="ghost" 
                      size="sm"
                      onClick={() => handleDuplicate(template)}
                      className="h-8 w-8 p-0"
                    >
                      <Copy className="h-4 w-4" />
                    </Button>
                    <Button 
                      variant="ghost" 
                      size="sm"
                      onClick={() => setDeleteTemplate(template)}
                      className="h-8 w-8 p-0 text-destructive hover:text-destructive"
                    >
                      <Trash2 className="h-4 w-4" />
                    </Button>
                  </div>
                </div>
              </CardHeader>
              <CardContent>
                <div className="space-y-3">
                  <p className="text-sm text-muted-foreground whitespace-pre-wrap line-clamp-3">
                    {template.body}
                  </p>
                  {template.variables.length > 0 && (
                    <div className="flex flex-wrap gap-1.5">
                      {template.variables.map((v) => (
                        <Badge key={v} variant="secondary" className="text-xs font-mono">
                          {`{{${v}}}`}
                        </Badge>
                      ))}
                    </div>
                  )}
                  <div className="flex items-center gap-4 text-xs text-muted-foreground pt-2 border-t">
                    <span>Created: {template.createdAt.toLocaleDateString()}</span>
                    <span>•</span>
                    <span>Updated: {template.updatedAt.toLocaleDateString()}</span>
                  </div>
                </div>
              </CardContent>
            </Card>
          ))
        )}
      </div>

      {/* Add/Edit Dialog */}
      <Dialog open={isAddOpen || !!editingTemplate} onOpenChange={(open) => {
        if (!open) {
          setIsAddOpen(false);
          setEditingTemplate(null);
          setFormData({ name: "", subject: "", body: "", type: "general" });
        }
      }}>
        <DialogContent className="!max-w-5xl w-[92vw] max-h-[90vh] overflow-hidden flex flex-col p-0 gap-0">
          <DialogHeader className="px-6 pt-6 pb-4">
            <DialogTitle className="text-xl">
              {editingTemplate ? "Edit Email Template" : "Create Email Template"}
            </DialogTitle>
            <DialogDescription>
              Create reusable email templates with dynamic variables
            </DialogDescription>
          </DialogHeader>

          <div className="flex-1 overflow-y-auto px-6 pb-6">
            <div className="space-y-6">
              {/* Name and Type */}
              <div className="grid grid-cols-1 gap-4 sm:grid-cols-2">
                <div className="space-y-2">
                  <Label htmlFor="name">
                    Template Name <span className="text-destructive">*</span>
                  </Label>
                  <Input
                    id="name"
                    placeholder="e.g., Interview Invitation"
                    value={formData.name}
                    onChange={(e) => setFormData({ ...formData, name: e.target.value })}
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="type">
                    Template Type <span className="text-destructive">*</span>
                  </Label>
                  <Select value={formData.type} onValueChange={(value) => setFormData({ ...formData, type: value as EmailTemplate["type"] })}>
                    <SelectTrigger id="type">
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      {templateTypes.map(type => (
                        <SelectItem key={type.value} value={type.value}>
                          {type.label}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
              </div>

              {/* Subject */}
              <div className="space-y-2">
                <Label htmlFor="subject">
                  Email Subject <span className="text-destructive">*</span>
                </Label>
                <Input
                  id="subject"
                  placeholder="e.g., Interview Invitation - {{jobTitle}}"
                  value={formData.subject}
                  onChange={(e) => setFormData({ ...formData, subject: e.target.value })}
                />
              </div>

              {/* Body */}
              <div className="space-y-2">
                <Label htmlFor="body">
                  Email Body <span className="text-destructive">*</span>
                </Label>
                <textarea
                  id="body"
                  name="body"
                  rows={12}
                  className="flex w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 resize-none"
                  placeholder="Dear {{firstName}},&#10;&#10;We are pleased to inform you...&#10;&#10;Best regards,&#10;{{recruiterName}}"
                  value={formData.body}
                  onChange={(e) => setFormData({ ...formData, body: e.target.value })}
                />
              </div>

              {/* Variables Section - Simplified */}
              <div className="space-y-3">
                <div className="flex items-center justify-between">
                  <Label>Available Variables</Label>
                  <Button
                    type="button"
                    variant="ghost"
                    size="sm"
                    onClick={() => setShowAddVariable(!showAddVariable)}
                    className="h-7 text-xs"
                  >
                    <Plus className="h-3 w-3 mr-1" />
                    Add Custom Variable
                  </Button>
                </div>
                
                {/* Instructions */}
                <div className="text-xs text-muted-foreground bg-muted/30 rounded-md p-3 space-y-1">
                  <p className="font-medium text-foreground">How to use variables:</p>
                  <ul className="list-disc list-inside space-y-0.5 ml-1">
                    <li>Click any variable button below to insert it at your cursor position</li>
                    <li>Variables like <code className="bg-background px-1 py-0.5 rounded text-primary">{'{{firstName}}'}</code> will be replaced with real data when sending emails</li>
                    <li>Need a custom variable? Click "Add Custom Variable" to create your own</li>
                  </ul>
                </div>
                
                {showAddVariable && (
                  <div className="flex gap-2 p-3 bg-blue-50 dark:bg-blue-950/20 rounded-lg border border-blue-200 dark:border-blue-900">
                    <Input
                      placeholder="e.g., customField"
                      value={customVariable}
                      onChange={(e) => setCustomVariable(e.target.value)}
                      className="h-9 text-sm"
                      onKeyDown={(e) => {
                        if (e.key === 'Enter' && customVariable.trim()) {
                          insertVariable(customVariable.trim());
                          setCustomVariable("");
                          setShowAddVariable(false);
                        }
                      }}
                    />
                    <Button
                      type="button"
                      size="sm"
                      onClick={() => {
                        if (customVariable.trim()) {
                          insertVariable(customVariable.trim());
                          setCustomVariable("");
                          setShowAddVariable(false);
                        }
                      }}
                      className="h-9"
                    >
                      Insert
                    </Button>
                  </div>
                )}
                
                <div className="border rounded-lg p-3 bg-muted/50 max-h-[200px] overflow-y-auto">
                  <div className="flex flex-wrap gap-2">
                    {availableVariables.map(variable => (
                      <Button
                        key={variable}
                        type="button"
                        variant="outline"
                        size="sm"
                        className="text-xs font-mono h-8 bg-background"
                        onClick={() => insertVariable(variable)}
                      >
                        {variable}
                      </Button>
                    ))}
                  </div>
                </div>
              </div>
            </div>
          </div>

          <DialogFooter className="px-6 py-4 border-t">
            <Button 
              variant="outline" 
              onClick={() => {
                setIsAddOpen(false);
                setEditingTemplate(null);
                setFormData({ name: "", subject: "", body: "", type: "general" });
              }}
            >
              Cancel
            </Button>
            <Button onClick={handleSave}>
              {editingTemplate ? "Update Template" : "Create Template"}
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      {/* Delete Confirmation */}
      <AlertDialog open={!!deleteTemplate} onOpenChange={() => setDeleteTemplate(null)}>
        <AlertDialogContent>
          <AlertDialogHeader>
            <AlertDialogTitle>Delete Email Template?</AlertDialogTitle>
            <AlertDialogDescription>
              Are you sure you want to delete "{deleteTemplate?.name}"? This action cannot be undone.
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel>Cancel</AlertDialogCancel>
            <AlertDialogAction onClick={handleDelete} className="bg-destructive text-destructive-foreground hover:bg-destructive/90">
              Delete Template
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
    </div>
  );
}
