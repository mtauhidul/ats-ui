import { useState } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Badge } from "@/components/ui/badge";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Separator } from "@/components/ui/separator";
import { ScrollArea } from "@/components/ui/scroll-area";
import { 
  MessageSquare, 
  Search, 
  Star,
  Send,
  AlertCircle,
  Shield,
  Briefcase,
  Users,
  UserCircle
} from "lucide-react";
import messagesData from "@/lib/mock-data/messages.json";
import teamData from "@/lib/mock-data/team.json";
import { hasPermission, canAccessFeature, getRestrictedMessage } from "@/lib/rbac";
import { toast } from "sonner";

interface Message {
  id: string;
  conversationId: string;
  senderId: string;
  senderName: string;
  senderRole: string;
  senderAvatar: string;
  recipientId: string;
  recipientName: string;
  recipientRole: string;
  recipientAvatar: string;
  subject: string;
  message: string;
  read: boolean;
  starred: boolean;
  sentAt: string;
  relatedEntity: {
    type: string;
    id: string;
    name: string;
  } | null;
}

export default function MessagesPage() {
  const currentUser = teamData[0];
  const canSendMessages = hasPermission(currentUser, 'canSendEmails');
  
  const [messages, setMessages] = useState<Message[]>(
    messagesData.map(m => ({ ...m }))
  );
  const [selectedMessage, setSelectedMessage] = useState<Message | null>(null);
  const [searchQuery, setSearchQuery] = useState("");
  const [filterType, setFilterType] = useState<"all" | "inbox" | "sent" | "starred">("inbox");
  const [replyText, setReplyText] = useState("");

  const currentUserId = currentUser.id;

  const getFilteredMessages = () => {
    let filtered = messages;

    if (filterType === "inbox") {
      filtered = messages.filter(m => m.recipientId === currentUserId);
    } else if (filterType === "sent") {
      filtered = messages.filter(m => m.senderId === currentUserId);
    } else if (filterType === "starred") {
      filtered = messages.filter(m => m.starred);
    }

    if (searchQuery) {
      filtered = filtered.filter(m =>
        m.subject.toLowerCase().includes(searchQuery.toLowerCase()) ||
        m.message.toLowerCase().includes(searchQuery.toLowerCase()) ||
        m.senderName.toLowerCase().includes(searchQuery.toLowerCase())
      );
    }

    return filtered.sort((a, b) => new Date(b.sentAt).getTime() - new Date(a.sentAt).getTime());
  };

  const unreadCount = messages.filter(m => !m.read && m.recipientId === currentUserId).length;
  const starredCount = messages.filter(m => m.starred).length;
  const inboxCount = messages.filter(m => m.recipientId === currentUserId).length;
  const sentCount = messages.filter(m => m.senderId === currentUserId).length;

  const formatTime = (dateString: string) => {
    const date = new Date(dateString);
    const now = new Date();
    const diffInHours = Math.floor((now.getTime() - date.getTime()) / (1000 * 60 * 60));

    if (diffInHours < 24) {
      return date.toLocaleTimeString('en-US', { hour: 'numeric', minute: '2-digit' });
    }
    return date.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });
  };

  const getRoleBadge = (role: string) => {
    switch (role) {
      case "admin":
        return <Badge className="bg-purple-600 text-xs"><Shield className="h-3 w-3 mr-1" />Admin</Badge>;
      case "recruiter":
        return <Badge variant="outline" className="bg-blue-50 text-blue-700 border-blue-200 text-xs">Recruiter</Badge>;
      case "hiring_manager":
        return <Badge variant="outline" className="bg-green-50 text-green-700 border-green-200 text-xs">Manager</Badge>;
      case "viewer":
        return <Badge variant="outline" className="bg-gray-50 text-gray-700 border-gray-200 text-xs">Viewer</Badge>;
      default:
        return <Badge variant="outline" className="text-xs">{role}</Badge>;
    }
  };

  const getRelatedEntityIcon = (type: string | undefined) => {
    if (!type) return null;
    switch (type) {
      case "job":
        return <Briefcase className="h-4 w-4 text-blue-600" />;
      case "candidate":
        return <UserCircle className="h-4 w-4 text-green-600" />;
      case "client":
        return <Users className="h-4 w-4 text-purple-600" />;
      default:
        return null;
    }
  };

  const toggleStar = (messageId: string) => {
    setMessages(prev =>
      prev.map(m => m.id === messageId ? { ...m, starred: !m.starred } : m)
    );
    toast.success("Message updated");
  };

  const markAsRead = (messageId: string) => {
    setMessages(prev =>
      prev.map(m => m.id === messageId ? { ...m, read: true } : m)
    );
  };

  const handleMessageClick = (message: Message) => {
    setSelectedMessage(message);
    if (!message.read && message.recipientId === currentUserId) {
      markAsRead(message.id);
    }
  };

  const handleSendReply = () => {
    if (!canSendMessages) {
      toast.error(getRestrictedMessage("send messages"));
      return;
    }
    
    if (!replyText.trim()) {
      toast.error("Please enter a message");
      return;
    }

    toast.success("Reply sent successfully!");
    setReplyText("");
  };

  const filteredMessages = getFilteredMessages();

  if (!canAccessFeature(currentUser, "messages")) {
    return (
      <div className="flex flex-1 flex-col">
        <div className="@container/main flex flex-1 flex-col gap-2">
          <div className="flex flex-col gap-4 py-4 md:gap-6 md:py-6">
            <div className="px-4 lg:px-6">
              <Card className="border-amber-200 bg-amber-50">
                <CardContent className="pt-6">
                  <div className="flex items-start gap-3">
                    <AlertCircle className="h-5 w-5 text-amber-600 mt-0.5" />
                    <div>
                      <p className="font-semibold text-amber-900">Access Restricted</p>
                      <p className="text-sm text-amber-700 mt-1">
                        {getRestrictedMessage("messages")}
                      </p>
                      <p className="text-xs text-amber-600 mt-2">
                        Current role: {currentUser.role}
                      </p>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </div>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="flex flex-1 flex-col">
      <div className="@container/main flex flex-1 flex-col gap-2">
        <div className="flex flex-col gap-4 py-4 md:gap-6 md:py-6">
          <div className="px-4 lg:px-6">
            <div className="mb-6">
              <div className="flex items-center gap-3">
                <div className="rounded-lg bg-blue-600/10 p-2">
                  <MessageSquare className="h-6 w-6 text-blue-600" />
                </div>
                <div>
                  <h2 className="text-2xl font-bold text-foreground">Messages</h2>
                  <p className="text-muted-foreground">
                    Team communication and messaging
                  </p>
                </div>
              </div>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
              <Card className="cursor-pointer hover:shadow-md transition-shadow" onClick={() => setFilterType("inbox")}>
                <CardContent className="pt-6">
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="text-sm text-muted-foreground">Inbox</p>
                      <p className="text-2xl font-bold">{inboxCount}</p>
                      {unreadCount > 0 && (
                        <p className="text-xs text-blue-600 mt-1">{unreadCount} unread</p>
                      )}
                    </div>
                    <MessageSquare className="h-8 w-8 text-muted-foreground" />
                  </div>
                </CardContent>
              </Card>
              <Card className="cursor-pointer hover:shadow-md transition-shadow" onClick={() => setFilterType("sent")}>
                <CardContent className="pt-6">
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="text-sm text-muted-foreground">Sent</p>
                      <p className="text-2xl font-bold">{sentCount}</p>
                    </div>
                    <Send className="h-8 w-8 text-muted-foreground" />
                  </div>
                </CardContent>
              </Card>
              <Card className="cursor-pointer hover:shadow-md transition-shadow" onClick={() => setFilterType("starred")}>
                <CardContent className="pt-6">
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="text-sm text-muted-foreground">Starred</p>
                      <p className="text-2xl font-bold">{starredCount}</p>
                    </div>
                    <Star className="h-8 w-8 text-muted-foreground" />
                  </div>
                </CardContent>
              </Card>
              <Card className="cursor-pointer hover:shadow-md transition-shadow" onClick={() => setFilterType("all")}>
                <CardContent className="pt-6">
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="text-sm text-muted-foreground">All Messages</p>
                      <p className="text-2xl font-bold">{messages.length}</p>
                    </div>
                    <MessageSquare className="h-8 w-8 text-muted-foreground" />
                  </div>
                </CardContent>
              </Card>
            </div>

            <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
              <Card className="lg:col-span-1">
                <CardHeader>
                  <CardTitle className="text-lg">Conversations</CardTitle>
                  <div className="relative mt-2">
                    <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground" />
                    <Input
                      placeholder="Search messages..."
                      value={searchQuery}
                      onChange={(e) => setSearchQuery(e.target.value)}
                      className="pl-9"
                    />
                  </div>
                </CardHeader>
                <CardContent className="p-0">
                  <ScrollArea className="h-[600px]">
                    {filteredMessages.length === 0 ? (
                      <div className="p-6 text-center text-muted-foreground">
                        <MessageSquare className="h-12 w-12 mx-auto mb-2 opacity-50" />
                        <p>No messages found</p>
                      </div>
                    ) : (
                      filteredMessages.map((message, index) => (
                        <div key={message.id}>
                          <div
                            className={`p-4 cursor-pointer transition-colors ${
                              selectedMessage?.id === message.id
                                ? "bg-blue-50"
                                : "hover:bg-gray-50"
                            } ${!message.read && message.recipientId === currentUserId ? "bg-blue-50/30" : ""}`}
                            onClick={() => handleMessageClick(message)}
                          >
                            <div className="flex items-start gap-3">
                              <Avatar className="h-10 w-10">
                                <AvatarImage 
                                  src={filterType === "sent" ? message.recipientAvatar : message.senderAvatar} 
                                  alt={filterType === "sent" ? message.recipientName : message.senderName} 
                                />
                                <AvatarFallback>
                                  {filterType === "sent" 
                                    ? message.recipientName.split(' ').map(n => n[0]).join('')
                                    : message.senderName.split(' ').map(n => n[0]).join('')}
                                </AvatarFallback>
                              </Avatar>
                              <div className="flex-1 min-w-0">
                                <div className="flex items-center justify-between gap-2 mb-1">
                                  <p className="font-semibold text-sm truncate">
                                    {filterType === "sent" ? message.recipientName : message.senderName}
                                  </p>
                                  <Button
                                    variant="ghost"
                                    size="sm"
                                    className="h-6 w-6 p-0"
                                    onClick={(e) => {
                                      e.stopPropagation();
                                      toggleStar(message.id);
                                    }}
                                  >
                                    <Star className={`h-4 w-4 ${message.starred ? "fill-yellow-400 text-yellow-400" : ""}`} />
                                  </Button>
                                </div>
                                <p className="text-sm font-medium text-foreground truncate mb-1">
                                  {message.subject}
                                </p>
                                <p className="text-xs text-muted-foreground truncate mb-1">
                                  {message.message}
                                </p>
                                <div className="flex items-center gap-2">
                                  <span className="text-xs text-muted-foreground">
                                    {formatTime(message.sentAt)}
                                  </span>
                                  {!message.read && message.recipientId === currentUserId && (
                                    <Badge className="bg-blue-600 text-xs">New</Badge>
                                  )}
                                </div>
                              </div>
                            </div>
                          </div>
                          {index < filteredMessages.length - 1 && <Separator />}
                        </div>
                      ))
                    )}
                  </ScrollArea>
                </CardContent>
              </Card>

              <Card className="lg:col-span-2">
                {selectedMessage ? (
                  <>
                    <CardHeader className="border-b">
                      <div className="flex items-start justify-between">
                        <div className="flex items-start gap-3">
                          <Avatar className="h-12 w-12">
                            <AvatarImage src={selectedMessage.senderAvatar} alt={selectedMessage.senderName} />
                            <AvatarFallback>
                              {selectedMessage.senderName.split(' ').map(n => n[0]).join('')}
                            </AvatarFallback>
                          </Avatar>
                          <div>
                            <div className="flex items-center gap-2 mb-1">
                              <h3 className="font-semibold">{selectedMessage.senderName}</h3>
                              {getRoleBadge(selectedMessage.senderRole)}
                            </div>
                            <p className="text-sm text-muted-foreground">
                              To: {selectedMessage.recipientName}
                            </p>
                            <p className="text-xs text-muted-foreground">
                              {new Date(selectedMessage.sentAt).toLocaleString()}
                            </p>
                          </div>
                        </div>
                        <Button
                          variant="ghost"
                          size="sm"
                          onClick={() => toggleStar(selectedMessage.id)}
                        >
                          <Star className={`h-5 w-5 ${selectedMessage.starred ? "fill-yellow-400 text-yellow-400" : ""}`} />
                        </Button>
                      </div>
                    </CardHeader>
                    <CardContent className="pt-6">
                      <div className="mb-4">
                        <h4 className="font-semibold text-lg mb-2">{selectedMessage.subject}</h4>
                        {selectedMessage.relatedEntity && (
                          <div className="flex items-center gap-2 text-sm text-muted-foreground mb-4">
                            {getRelatedEntityIcon(selectedMessage.relatedEntity.type)}
                            <span>Related to: {selectedMessage.relatedEntity.name}</span>
                          </div>
                        )}
                      </div>
                      <div className="prose max-w-none mb-6">
                        <p className="text-foreground whitespace-pre-wrap">{selectedMessage.message}</p>
                      </div>

                      <Separator className="my-6" />

                      <div>
                        <h5 className="font-semibold mb-3">Reply</h5>
                        {canSendMessages ? (
                          <div className="space-y-3">
                            <Textarea
                              placeholder="Type your reply..."
                              value={replyText}
                              onChange={(e) => setReplyText(e.target.value)}
                              rows={4}
                            />
                            <div className="flex justify-end gap-2">
                              <Button variant="outline" onClick={() => setReplyText("")}>
                                Cancel
                              </Button>
                              <Button onClick={handleSendReply}>
                                <Send className="h-4 w-4 mr-2" />
                                Send Reply
                              </Button>
                            </div>
                          </div>
                        ) : (
                          <Card className="border-amber-200 bg-amber-50">
                            <CardContent className="pt-4">
                              <div className="flex items-start gap-3">
                                <AlertCircle className="h-5 w-5 text-amber-600 mt-0.5" />
                                <p className="text-sm text-amber-700">
                                  You don't have permission to send messages. Contact your administrator.
                                </p>
                              </div>
                            </CardContent>
                          </Card>
                        )}
                      </div>
                    </CardContent>
                  </>
                ) : (
                  <CardContent className="py-24">
                    <div className="text-center text-muted-foreground">
                      <MessageSquare className="h-16 w-16 mx-auto mb-4 opacity-50" />
                      <p className="text-lg font-medium mb-2">No message selected</p>
                      <p className="text-sm">Select a conversation to view the message</p>
                    </div>
                  </CardContent>
                )}
              </Card>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}
