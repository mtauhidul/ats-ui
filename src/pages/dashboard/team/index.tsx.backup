import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Card, CardContent } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Search, Plus, Users, Mail, Phone, Shield, TrendingUp } from "lucide-react";
import teamData from "@/lib/mock-data/team.json";
import { toast } from "sonner";

export default function TeamPage() {
  const [searchQuery, setSearchQuery] = useState("");
  const [roleFilter, setRoleFilter] = useState<string>("all");
  const [statusFilter, setStatusFilter] = useState<string>("all");
  const [sortBy, setSortBy] = useState<string>("name");

  // Transform team data
  const [team] = useState(
    teamData.map((member) => ({
      ...member,
      createdAt: new Date(member.createdAt),
      lastLoginAt: member.lastLoginAt ? new Date(member.lastLoginAt) : undefined,
    }))
  );

  // Filter team members
  const filteredTeam = team.filter((member) => {
    const matchesSearch =
      searchQuery === "" ||
      member.firstName.toLowerCase().includes(searchQuery.toLowerCase()) ||
      member.lastName.toLowerCase().includes(searchQuery.toLowerCase()) ||
      member.email.toLowerCase().includes(searchQuery.toLowerCase()) ||
      member.title.toLowerCase().includes(searchQuery.toLowerCase());

    const matchesRole = roleFilter === "all" || member.role === roleFilter;
    const matchesStatus = statusFilter === "all" || member.status === statusFilter;

    return matchesSearch && matchesRole && matchesStatus;
  });

  // Sort team members
  const sortedTeam = [...filteredTeam].sort((a, b) => {
    switch (sortBy) {
      case "name":
        return `${a.firstName} ${a.lastName}`.localeCompare(
          `${b.firstName} ${b.lastName}`
        );
      case "role":
        return a.role.localeCompare(b.role);
      case "department":
        return a.department.localeCompare(b.department);
      case "lastLogin":
        if (!a.lastLoginAt) return 1;
        if (!b.lastLoginAt) return -1;
        return b.lastLoginAt.getTime() - a.lastLoginAt.getTime();
      default:
        return 0;
    }
  });

  // Calculate statistics
  const stats = {
    total: team.length,
    active: team.filter((m) => m.status === "active").length,
    inactive: team.filter((m) => m.status === "inactive").length,
    admins: team.filter((m) => m.role === "admin").length,
    recruiters: team.filter((m) => m.role === "recruiter").length,
    totalActiveJobs: team.reduce((sum, m) => sum + m.statistics.activeJobs, 0),
    totalPlacements: team.reduce((sum, m) => sum + m.statistics.placedCandidates, 0),
  };

  // Get role badge
  const getRoleBadge = (role: string) => {
    switch (role) {
      case "admin":
        return (
          <Badge className="bg-purple-600">
            <Shield className="h-3 w-3 mr-1" />
            Admin
          </Badge>
        );
      case "recruiter":
        return (
          <Badge variant="outline" className="bg-blue-50 text-blue-700 border-blue-200">
            Recruiter
          </Badge>
        );
      case "hiring_manager":
        return (
          <Badge variant="outline" className="bg-green-50 text-green-700 border-green-200">
            Hiring Manager
          </Badge>
        );
      case "viewer":
        return (
          <Badge variant="outline" className="bg-gray-50 text-gray-700 border-gray-200">
            Viewer
          </Badge>
        );
      default:
        return <Badge variant="secondary">{role}</Badge>;
    }
  };

  // Get status badge
  const getStatusBadge = (status: string) => {
    return status === "active" ? (
      <Badge variant="outline" className="bg-green-50 text-green-700 border-green-200">
        Active
      </Badge>
    ) : (
      <Badge variant="outline" className="bg-gray-100 text-gray-700 border-gray-300">
        Inactive
      </Badge>
    );
  };

  const handleAddTeamMember = () => {
    toast.info("Add team member feature - Coming soon!");
  };

  return (
    <div className="flex flex-1 flex-col">
      <div className="@container/main flex flex-1 flex-col gap-2">
        <div className="flex flex-col gap-4 py-4 md:gap-6 md:py-6">
          <div className="px-4 lg:px-6 space-y-6">
            {/* Header */}
            <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
              <div>
                <h1 className="text-3xl font-bold text-foreground">Team</h1>
                <p className="text-muted-foreground mt-1">
                  Manage team members, roles, and permissions
                </p>
              </div>
              <Button onClick={handleAddTeamMember}>
                <Plus className="h-4 w-4 mr-2" />
                Add Team Member
              </Button>
            </div>

            {/* Statistics Cards */}
            <div className="grid grid-cols-2 sm:grid-cols-4 lg:grid-cols-7 gap-3">
              <div className="rounded-lg border bg-linear-to-br from-card to-muted/20 p-3 shadow-sm">
                <div className="flex items-center justify-between mb-1.5">
                  <div className="rounded-md bg-primary/10 p-1.5">
                    <Users className="h-4 w-4 text-primary" />
                  </div>
                  <span className="text-xs font-medium text-muted-foreground">Total</span>
                </div>
                <p className="text-xl font-bold">{stats.total}</p>
                <p className="text-xs text-muted-foreground">Team Members</p>
              </div>

              <div className="rounded-lg border bg-linear-to-br from-green-50 to-green-100/20 dark:from-green-950/20 dark:to-green-900/10 p-3 shadow-sm">
                <div className="flex items-center justify-between mb-1.5">
                  <div className="rounded-md bg-green-500/10 p-1.5">
                    <Users className="h-4 w-4 text-green-600 dark:text-green-400" />
                  </div>
                  <span className="text-xs font-medium text-green-700 dark:text-green-400">
                    Active
                  </span>
                </div>
                <p className="text-xl font-bold text-green-600 dark:text-green-400">
                  {stats.active}
                </p>
                <p className="text-xs text-green-600/70 dark:text-green-400/70">
                  {stats.total > 0 ? Math.round((stats.active / stats.total) * 100) : 0}%
                  online
                </p>
              </div>

              <div className="rounded-lg border bg-linear-to-br from-purple-50 to-purple-100/20 dark:from-purple-950/20 dark:to-purple-900/10 p-3 shadow-sm">
                <div className="flex items-center justify-between mb-1.5">
                  <div className="rounded-md bg-purple-500/10 p-1.5">
                    <Shield className="h-4 w-4 text-purple-600 dark:text-purple-400" />
                  </div>
                  <span className="text-xs font-medium text-purple-700 dark:text-purple-400">
                    Admins
                  </span>
                </div>
                <p className="text-xl font-bold text-purple-600 dark:text-purple-400">
                  {stats.admins}
                </p>
                <p className="text-xs text-purple-600/70 dark:text-purple-400/70">
                  Full access
                </p>
              </div>

              <div className="rounded-lg border bg-linear-to-br from-blue-50 to-blue-100/20 dark:from-blue-950/20 dark:to-blue-900/10 p-3 shadow-sm">
                <div className="flex items-center justify-between mb-1.5">
                  <div className="rounded-md bg-blue-500/10 p-1.5">
                    <Users className="h-4 w-4 text-blue-600 dark:text-blue-400" />
                  </div>
                  <span className="text-xs font-medium text-blue-700 dark:text-blue-400">
                    Recruiters
                  </span>
                </div>
                <p className="text-xl font-bold text-blue-600 dark:text-blue-400">
                  {stats.recruiters}
                </p>
                <p className="text-xs text-blue-600/70 dark:text-blue-400/70">Active</p>
              </div>

              <div className="rounded-lg border bg-linear-to-br from-gray-50 to-gray-100/20 dark:from-gray-950/20 dark:to-gray-900/10 p-3 shadow-sm">
                <div className="flex items-center justify-between mb-1.5">
                  <div className="rounded-md bg-gray-500/10 p-1.5">
                    <Users className="h-4 w-4 text-gray-600 dark:text-gray-400" />
                  </div>
                  <span className="text-xs font-medium text-gray-700 dark:text-gray-400">
                    Inactive
                  </span>
                </div>
                <p className="text-xl font-bold text-gray-600 dark:text-gray-400">
                  {stats.inactive}
                </p>
                <p className="text-xs text-gray-600/70 dark:text-gray-400/70">Offline</p>
              </div>

              <div className="rounded-lg border bg-linear-to-br from-amber-50 to-amber-100/20 dark:from-amber-950/20 dark:to-amber-900/10 p-3 shadow-sm">
                <div className="flex items-center justify-between mb-1.5">
                  <div className="rounded-md bg-amber-500/10 p-1.5">
                    <TrendingUp className="h-4 w-4 text-amber-600 dark:text-amber-400" />
                  </div>
                  <span className="text-xs font-medium text-amber-700 dark:text-amber-400">
                    Active Jobs
                  </span>
                </div>
                <p className="text-xl font-bold text-amber-600 dark:text-amber-400">
                  {stats.totalActiveJobs}
                </p>
                <p className="text-xs text-amber-600/70 dark:text-amber-400/70">Total</p>
              </div>

              <div className="rounded-lg border bg-linear-to-br from-emerald-50 to-emerald-100/20 dark:from-emerald-950/20 dark:to-emerald-900/10 p-3 shadow-sm">
                <div className="flex items-center justify-between mb-1.5">
                  <div className="rounded-md bg-emerald-500/10 p-1.5">
                    <TrendingUp className="h-4 w-4 text-emerald-600 dark:text-emerald-400" />
                  </div>
                  <span className="text-xs font-medium text-emerald-700 dark:text-emerald-400">
                    Placements
                  </span>
                </div>
                <p className="text-xl font-bold text-emerald-600 dark:text-emerald-400">
                  {stats.totalPlacements}
                </p>
                <p className="text-xs text-emerald-600/70 dark:text-emerald-400/70">
                  Lifetime
                </p>
              </div>
            </div>

            {/* Filters and Search */}
            <Card>
              <CardContent className="p-4">
                <div className="flex flex-col lg:flex-row gap-4">
                  <div className="flex-1">
                    <div className="relative">
                      <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground" />
                      <Input
                        placeholder="Search by name, email, or title..."
                        value={searchQuery}
                        onChange={(e) => setSearchQuery(e.target.value)}
                        className="pl-9"
                      />
                    </div>
                  </div>

                  <div className="flex flex-wrap gap-3">
                    <Select value={roleFilter} onValueChange={setRoleFilter}>
                      <SelectTrigger className="w-[160px]">
                        <SelectValue placeholder="Role" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="all">All Roles</SelectItem>
                        <SelectItem value="admin">Admin</SelectItem>
                        <SelectItem value="recruiter">Recruiter</SelectItem>
                        <SelectItem value="hiring_manager">Hiring Manager</SelectItem>
                        <SelectItem value="viewer">Viewer</SelectItem>
                      </SelectContent>
                    </Select>

                    <Select value={statusFilter} onValueChange={setStatusFilter}>
                      <SelectTrigger className="w-[140px]">
                        <SelectValue placeholder="Status" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="all">All Status</SelectItem>
                        <SelectItem value="active">Active</SelectItem>
                        <SelectItem value="inactive">Inactive</SelectItem>
                      </SelectContent>
                    </Select>

                    <Select value={sortBy} onValueChange={setSortBy}>
                      <SelectTrigger className="w-[140px]">
                        <SelectValue placeholder="Sort by" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="name">Name (A-Z)</SelectItem>
                        <SelectItem value="role">Role</SelectItem>
                        <SelectItem value="department">Department</SelectItem>
                        <SelectItem value="lastLogin">Last Login</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                </div>
              </CardContent>
            </Card>

            {/* Team Members List */}
            <div>
              <div className="flex items-center justify-between mb-4">
                <p className="text-sm text-muted-foreground">
                  Showing{" "}
                  <span className="font-medium text-foreground">
                    {sortedTeam.length}
                  </span>{" "}
                  of <span className="font-medium text-foreground">{stats.total}</span>{" "}
                  team members
                </p>
              </div>

              {sortedTeam.length === 0 ? (
                <Card>
                  <CardContent className="flex flex-col items-center justify-center py-16">
                    <Users className="h-12 w-12 text-muted-foreground mb-4" />
                    <h3 className="text-lg font-semibold text-foreground mb-2">
                      No team members found
                    </h3>
                    <p className="text-sm text-muted-foreground">
                      Try adjusting your filters
                    </p>
                  </CardContent>
                </Card>
              ) : (
                <div className="grid grid-cols-1 lg:grid-cols-2 gap-4">
                  {sortedTeam.map((member) => (
                    <Card key={member.id} className="overflow-hidden">
                      <CardContent className="p-6">
                        <div className="flex items-start gap-4">
                          <Avatar className="h-16 w-16">
                            <AvatarImage src={member.avatar} />
                            <AvatarFallback>
                              {member.firstName[0]}
                              {member.lastName[0]}
                            </AvatarFallback>
                          </Avatar>
                          <div className="flex-1 min-w-0">
                            <div className="flex items-start justify-between gap-2 mb-2">
                              <div>
                                <h3 className="font-semibold text-lg">
                                  {member.firstName} {member.lastName}
                                </h3>
                                <p className="text-sm text-muted-foreground">
                                  {member.title} • {member.department}
                                </p>
                              </div>
                              <div className="flex flex-col gap-1 items-end">
                                {getRoleBadge(member.role)}
                                {getStatusBadge(member.status)}
                              </div>
                            </div>

                            <div className="space-y-2 text-sm">
                              <div className="flex items-center gap-2 text-muted-foreground">
                                <Mail className="h-4 w-4" />
                                <a
                                  href={`mailto:${member.email}`}
                                  className="hover:text-foreground"
                                >
                                  {member.email}
                                </a>
                              </div>
                              {member.phone && (
                                <div className="flex items-center gap-2 text-muted-foreground">
                                  <Phone className="h-4 w-4" />
                                  <a
                                    href={`tel:${member.phone}`}
                                    className="hover:text-foreground"
                                  >
                                    {member.phone}
                                  </a>
                                </div>
                              )}
                            </div>

                            <div className="grid grid-cols-4 gap-3 mt-4 pt-4 border-t">
                              <div>
                                <p className="text-xs text-muted-foreground">Active Jobs</p>
                                <p className="text-lg font-semibold">
                                  {member.statistics.activeJobs}
                                </p>
                              </div>
                              <div>
                                <p className="text-xs text-muted-foreground">Placements</p>
                                <p className="text-lg font-semibold">
                                  {member.statistics.placedCandidates}
                                </p>
                              </div>
                              <div>
                                <p className="text-xs text-muted-foreground">Reviews</p>
                                <p className="text-lg font-semibold">
                                  {member.statistics.pendingReviews}
                                </p>
                              </div>
                              <div>
                                <p className="text-xs text-muted-foreground">Emails</p>
                                <p className="text-lg font-semibold">
                                  {member.statistics.emailsSent}
                                </p>
                              </div>
                            </div>

                            {member.lastLoginAt && (
                              <p className="text-xs text-muted-foreground mt-3">
                                Last login:{" "}
                                {member.lastLoginAt.toLocaleDateString()}{" "}
                                {member.lastLoginAt.toLocaleTimeString()}
                              </p>
                            )}
                          </div>
                        </div>
                      </CardContent>
                    </Card>
                  ))}
                </div>
              )}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}
