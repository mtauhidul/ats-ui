import { useState } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import {
  BarChart,
  Bar,
  LineChart,
  Line,
  PieChart,
  Pie,
  Cell,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  Legend,
  ResponsiveContainer,
} from "recharts";
import {
  Users,
  Briefcase,
  FileText,
  TrendingUp,
  Clock,
  Target,
  Award,
  BarChart3,
} from "lucide-react";
import applicationsData from "@/lib/mock-data/applications.json";
import candidatesData from "@/lib/mock-data/candidates.json";
import jobsData from "@/lib/mock-data/jobs.json";
import clientsData from "@/lib/mock-data/clients.json";

export default function AnalyticsPage() {
  const [timeRange, setTimeRange] = useState("30");

  // Calculate statistics
  const stats = {
    totalApplications: applicationsData.length,
    pendingApplications: applicationsData.filter((a) => a.status === "pending").length,
    approvedApplications: applicationsData.filter((a) => a.status === "approved").length,
    rejectedApplications: applicationsData.filter((a) => a.status === "rejected").length,
    totalCandidates: candidatesData.length,
    activeCandidates: candidatesData.filter((c) => c.isActive).length,
    totalJobs: jobsData.length,
    openJobs: jobsData.filter((j) => j.status === "open").length,
    closedJobs: jobsData.filter((j) => j.status === "closed").length,
    totalClients: clientsData.length,
    activeClients: clientsData.filter((c) => c.status === "active").length,
    approvalRate:
      applicationsData.length > 0
        ? Math.round(
            (applicationsData.filter((a) => a.status === "approved").length /
              applicationsData.length) *
              100
          )
        : 0,
    avgTimeToHire: 12, // Mock data - days
  };

  // Application status distribution
  const applicationStatusData = [
    {
      name: "Pending",
      value: stats.pendingApplications,
      color: "#eab308",
    },
    {
      name: "Approved",
      value: stats.approvedApplications,
      color: "#22c55e",
    },
    {
      name: "Rejected",
      value: stats.rejectedApplications,
      color: "#ef4444",
    },
  ];

  // Applications over time (last 30 days)
  const applicationsOverTime = Array.from({ length: 30 }, (_, i) => {
    const date = new Date();
    date.setDate(date.getDate() - (29 - i));
    return {
      date: date.toLocaleDateString("en-US", { month: "short", day: "numeric" }),
      applications: Math.floor(Math.random() * 15) + 5,
      approved: Math.floor(Math.random() * 10) + 2,
      rejected: Math.floor(Math.random() * 8) + 1,
    };
  });

  // Source distribution
  const sourceData = [
    { name: "LinkedIn", value: 12, color: "#0077b5" },
    { name: "Email", value: 8, color: "#ea4335" },
    { name: "Website", value: 6, color: "#3b82f6" },
    { name: "Referral", value: 4, color: "#10b981" },
    { name: "Other", value: 8, color: "#6b7280" },
  ];

  // Jobs performance
  const jobsPerformance = jobsData.slice(0, 5).map((job) => {
    const client = clientsData.find((c) => c.id === job.clientId);
    return {
      name: job.title.substring(0, 20),
      applications: job.statistics?.totalApplications || 0,
      candidates: job.candidateIds?.length || 0,
      client: client?.companyName || "Unknown",
    };
  });

  // Client activity
  const clientActivity = clientsData.slice(0, 6).map((client) => ({
    name: client.companyName.substring(0, 15),
    jobs: client.statistics.activeJobs,
    candidates: client.statistics.activeCandidates,
  }));

  // Pipeline conversion funnel
  const conversionFunnel = [
    { stage: "Applications", count: stats.totalApplications, percentage: 100 },
    { stage: "Approved", count: stats.approvedApplications, percentage: stats.approvalRate },
    {
      stage: "Interviewing",
      count: Math.floor(stats.approvedApplications * 0.6),
      percentage: Math.round(stats.approvalRate * 0.6),
    },
    {
      stage: "Offers",
      count: Math.floor(stats.approvedApplications * 0.3),
      percentage: Math.round(stats.approvalRate * 0.3),
    },
    {
      stage: "Hired",
      count: Math.floor(stats.approvedApplications * 0.2),
      percentage: Math.round(stats.approvalRate * 0.2),
    },
  ];

  return (
    <div className="flex flex-1 flex-col">
      <div className="@container/main flex flex-1 flex-col gap-2">
        <div className="flex flex-col gap-4 py-4 md:gap-6 md:py-6">
          <div className="px-4 lg:px-6 space-y-6">
            {/* Header */}
            <div className="flex items-center justify-between">
              <div>
                <h1 className="text-3xl font-bold text-foreground flex items-center gap-2">
                  <BarChart3 className="h-8 w-8" />
                  Analytics Dashboard
                </h1>
                <p className="text-muted-foreground mt-1">
                  Track recruitment metrics and performance insights
                </p>
              </div>
              <Select value={timeRange} onValueChange={setTimeRange}>
                <SelectTrigger className="w-[180px]">
                  <SelectValue placeholder="Time range" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="7">Last 7 days</SelectItem>
                  <SelectItem value="30">Last 30 days</SelectItem>
                  <SelectItem value="90">Last 90 days</SelectItem>
                  <SelectItem value="365">Last year</SelectItem>
                </SelectContent>
              </Select>
            </div>

            {/* Key Metrics */}
            <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
              <Card>
                <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                  <CardTitle className="text-sm font-medium">Total Applications</CardTitle>
                  <FileText className="h-4 w-4 text-muted-foreground" />
                </CardHeader>
                <CardContent>
                  <div className="text-2xl font-bold">{stats.totalApplications}</div>
                  <p className="text-xs text-muted-foreground">
                    {stats.pendingApplications} pending review
                  </p>
                </CardContent>
              </Card>

              <Card>
                <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                  <CardTitle className="text-sm font-medium">Total Candidates</CardTitle>
                  <Users className="h-4 w-4 text-muted-foreground" />
                </CardHeader>
                <CardContent>
                  <div className="text-2xl font-bold">{stats.totalCandidates}</div>
                  <p className="text-xs text-muted-foreground">
                    {stats.activeCandidates} active
                  </p>
                </CardContent>
              </Card>

              <Card>
                <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                  <CardTitle className="text-sm font-medium">Open Jobs</CardTitle>
                  <Briefcase className="h-4 w-4 text-muted-foreground" />
                </CardHeader>
                <CardContent>
                  <div className="text-2xl font-bold">{stats.openJobs}</div>
                  <p className="text-xs text-muted-foreground">
                    of {stats.totalJobs} total jobs
                  </p>
                </CardContent>
              </Card>

              <Card>
                <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                  <CardTitle className="text-sm font-medium">Approval Rate</CardTitle>
                  <TrendingUp className="h-4 w-4 text-muted-foreground" />
                </CardHeader>
                <CardContent>
                  <div className="text-2xl font-bold">{stats.approvalRate}%</div>
                  <p className="text-xs text-muted-foreground">
                    {stats.approvedApplications} of {stats.totalApplications}
                  </p>
                </CardContent>
              </Card>
            </div>

            {/* Performance Metrics */}
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              <Card>
                <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                  <CardTitle className="text-sm font-medium">Active Clients</CardTitle>
                  <Target className="h-4 w-4 text-muted-foreground" />
                </CardHeader>
                <CardContent>
                  <div className="text-2xl font-bold">{stats.activeClients}</div>
                  <p className="text-xs text-muted-foreground">
                    {((stats.activeClients / stats.totalClients) * 100).toFixed(0)}%
                    engagement
                  </p>
                </CardContent>
              </Card>

              <Card>
                <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                  <CardTitle className="text-sm font-medium">Avg. Time to Hire</CardTitle>
                  <Clock className="h-4 w-4 text-muted-foreground" />
                </CardHeader>
                <CardContent>
                  <div className="text-2xl font-bold">{stats.avgTimeToHire} days</div>
                  <p className="text-xs text-green-600">â†“ 2 days vs last month</p>
                </CardContent>
              </Card>

              <Card>
                <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                  <CardTitle className="text-sm font-medium">Success Rate</CardTitle>
                  <Award className="h-4 w-4 text-muted-foreground" />
                </CardHeader>
                <CardContent>
                  <div className="text-2xl font-bold">78%</div>
                  <p className="text-xs text-muted-foreground">
                    Placements vs offers
                  </p>
                </CardContent>
              </Card>
            </div>

            {/* Charts Section */}
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              {/* Applications Over Time */}
              <Card>
                <CardHeader>
                  <CardTitle>Applications Over Time</CardTitle>
                  <p className="text-sm text-muted-foreground">
                    Daily application submissions and outcomes
                  </p>
                </CardHeader>
                <CardContent>
                  <ResponsiveContainer width="100%" height={300}>
                    <LineChart data={applicationsOverTime}>
                      <CartesianGrid strokeDasharray="3 3" />
                      <XAxis
                        dataKey="date"
                        fontSize={12}
                        tick={{ fill: "hsl(var(--muted-foreground))" }}
                      />
                      <YAxis fontSize={12} tick={{ fill: "hsl(var(--muted-foreground))" }} />
                      <Tooltip />
                      <Legend />
                      <Line
                        type="monotone"
                        dataKey="applications"
                        stroke="#3b82f6"
                        strokeWidth={2}
                        name="Applications"
                      />
                      <Line
                        type="monotone"
                        dataKey="approved"
                        stroke="#22c55e"
                        strokeWidth={2}
                        name="Approved"
                      />
                      <Line
                        type="monotone"
                        dataKey="rejected"
                        stroke="#ef4444"
                        strokeWidth={2}
                        name="Rejected"
                      />
                    </LineChart>
                  </ResponsiveContainer>
                </CardContent>
              </Card>

              {/* Application Status Distribution */}
              <Card>
                <CardHeader>
                  <CardTitle>Application Status Distribution</CardTitle>
                  <p className="text-sm text-muted-foreground">
                    Current status breakdown
                  </p>
                </CardHeader>
                <CardContent>
                  <ResponsiveContainer width="100%" height={300}>
                    <PieChart>
                      <Pie
                        data={applicationStatusData}
                        cx="50%"
                        cy="50%"
                        labelLine={false}
                        label={({ name, percent }) =>
                          `${name}: ${(percent * 100).toFixed(0)}%`
                        }
                        outerRadius={100}
                        fill="#8884d8"
                        dataKey="value"
                      >
                        {applicationStatusData.map((entry, index) => (
                          <Cell key={`cell-${index}`} fill={entry.color} />
                        ))}
                      </Pie>
                      <Tooltip />
                    </PieChart>
                  </ResponsiveContainer>
                </CardContent>
              </Card>

              {/* Top Jobs Performance */}
              <Card>
                <CardHeader>
                  <CardTitle>Top Jobs Performance</CardTitle>
                  <p className="text-sm text-muted-foreground">
                    Most active job openings
                  </p>
                </CardHeader>
                <CardContent>
                  <ResponsiveContainer width="100%" height={300}>
                    <BarChart data={jobsPerformance}>
                      <CartesianGrid strokeDasharray="3 3" />
                      <XAxis
                        dataKey="name"
                        fontSize={12}
                        tick={{ fill: "hsl(var(--muted-foreground))" }}
                      />
                      <YAxis fontSize={12} tick={{ fill: "hsl(var(--muted-foreground))" }} />
                      <Tooltip />
                      <Legend />
                      <Bar dataKey="applications" fill="#3b82f6" name="Applications" />
                      <Bar dataKey="candidates" fill="#22c55e" name="Candidates" />
                    </BarChart>
                  </ResponsiveContainer>
                </CardContent>
              </Card>

              {/* Source Distribution */}
              <Card>
                <CardHeader>
                  <CardTitle>Application Sources</CardTitle>
                  <p className="text-sm text-muted-foreground">
                    Where candidates are coming from
                  </p>
                </CardHeader>
                <CardContent>
                  <ResponsiveContainer width="100%" height={300}>
                    <PieChart>
                      <Pie
                        data={sourceData}
                        cx="50%"
                        cy="50%"
                        labelLine={false}
                        label={({ name, percent }) =>
                          `${name}: ${(percent * 100).toFixed(0)}%`
                        }
                        outerRadius={100}
                        fill="#8884d8"
                        dataKey="value"
                      >
                        {sourceData.map((entry, index) => (
                          <Cell key={`cell-${index}`} fill={entry.color} />
                        ))}
                      </Pie>
                      <Tooltip />
                    </PieChart>
                  </ResponsiveContainer>
                </CardContent>
              </Card>
            </div>

            {/* Client Activity */}
            <Card>
              <CardHeader>
                <CardTitle>Client Activity</CardTitle>
                <p className="text-sm text-muted-foreground">
                  Active jobs and candidates per client
                </p>
              </CardHeader>
              <CardContent>
                <ResponsiveContainer width="100%" height={300}>
                  <BarChart data={clientActivity} layout="horizontal">
                    <CartesianGrid strokeDasharray="3 3" />
                    <XAxis
                      dataKey="name"
                      fontSize={12}
                      tick={{ fill: "hsl(var(--muted-foreground))" }}
                    />
                    <YAxis fontSize={12} tick={{ fill: "hsl(var(--muted-foreground))" }} />
                    <Tooltip />
                    <Legend />
                    <Bar dataKey="jobs" fill="#8b5cf6" name="Active Jobs" />
                    <Bar dataKey="candidates" fill="#06b6d4" name="Candidates" />
                  </BarChart>
                </ResponsiveContainer>
              </CardContent>
            </Card>

            {/* Conversion Funnel */}
            <Card>
              <CardHeader>
                <CardTitle>Recruitment Funnel</CardTitle>
                <p className="text-sm text-muted-foreground">
                  Candidate conversion through pipeline stages
                </p>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  {conversionFunnel.map((stage, index) => (
                    <div key={stage.stage}>
                      <div className="flex items-center justify-between mb-2">
                        <span className="text-sm font-medium">{stage.stage}</span>
                        <span className="text-sm text-muted-foreground">
                          {stage.count} ({stage.percentage}%)
                        </span>
                      </div>
                      <div className="h-8 bg-muted rounded-lg overflow-hidden">
                        <div
                          className={`h-full transition-all ${
                            index === 0
                              ? "bg-blue-500"
                              : index === 1
                              ? "bg-green-500"
                              : index === 2
                              ? "bg-yellow-500"
                              : index === 3
                              ? "bg-orange-500"
                              : "bg-purple-500"
                          }`}
                          style={{ width: `${stage.percentage}%` }}
                        />
                      </div>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>
          </div>
        </div>
      </div>
    </div>
  );
}
